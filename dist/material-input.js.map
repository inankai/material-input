{"version":3,"names":[],"mappings":"","sources":["material-input.js"],"sourcesContent":["/* global HTMLElement HTMLFormElement HTMLBodyElement */\n'use strict'\n\nclass MaterialInput extends HTMLElement {\n\n  constructor () { // eslint-disable-line no-useless-constructor\n    super() // always call super() first in the ctor. This also calls the extended class' ctor.\n  }\n\n  createdCallback () {\n    var value = ''\n        // set value of material-input\n    Object.defineProperty(this, 'value', {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return value\n      },\n      set: function (newValue) {\n        value = !newValue ? '' : newValue\n        this._value(value)\n        if (this.$input.value !== value) {\n          this.$input.value = value\n        }\n      }\n    })\n\n    this.createShadowRoot().innerHTML = `\n            <style>\n                :host{\n                    display: block;\n                    position: relative;\n                    background: transparent;\n                    margin: .5em 0;\n                }\n                .material-input__container{\n                    width: inherit;\n                    display: block;\n                    position: relative;\n                }\n                .material-input__input{\n                    box-sizing: border-box;\n                    position: relative;\n                    background-color: transparent;\n                    font-size: 1em;\n                    color: var(--material-input-text-color, black);\n                    padding: 1.4em 1em .6em 10px;\n                    display: block;\n                    width: 100%;\n                    border: none;\n                    border-bottom: var(--material-input-line-height, 1px) solid var(--material-input-border-color, rgb(206,212,218));\n                    box-shadow: none;\n                }\n                .material-input__container.invalid .material-input__input{\n                    border-bottom-color: var(--material-input-invalid-color, rgb(224,49,49));\n                }\n                .material-input__container.valid .material-input__input{\n                    border-bottom-color: var(--material-input-valid-color, rgb(47,158,68));\n                }\n                .material-input__input:focus{\n                    outline: none;\n                }\n                /* placeholder and placeholder fade on focus */\n                .material-input__input::-webkit-input-placeholder {\n                    color: var(--material-input-placeholder-color, rgb(134,142,150));\n                    opacity: 1;\n                }\n                .material-input__input:focus::-webkit-input-placeholder {\n                    opacity: .5;\n                    transition: opacity .35s ease;\n                }\n                .material-input__input::-moz-placeholder {\n                    color: var(--material-input-placeholder-color, rgb(134,142,150));\n                    opacity: 1;\n                }\n                .material-input__input:focus::-moz-placeholder {\n                    opacity: .5;\n                    transition: opacity .35s ease;\n                }\n                .material-input__input:-ms-input-placeholder {\n                    color: var(--material-input-placeholder-color, rgb(134,142,150));\n                    opacity: 1;\n                }\n                .material-input__input:-ms-input-placeholder {\n                    opacity: .5;\n                    transition: opacity .35s ease;\n                }\n                /* Labels */\n                .material-input__label{\n                    color: var(--material-input-placeholder-color, rgb(134,142,150));\n                    font-size: inherit;\n                    pointer-events: none;\n                    position: absolute;\n                    left: 10px;\n                    top: 1.42em;\n                    transition: 0.2s ease all;\n                }\n                .material-input__container.no-animation .material-input__label,\n                .material-input__container.label-always-floats .material-input__label{\n                    transition: 0s ease all;\n                }\n                .material-input__container.is-empty .material-input__input[placeholder] ~ .material-input__label{\n                    color: var(--material-input-text-color, black);\n                }\n                /* active state */\n                .material-input__input:focus ~ .material-input__label,\n                .material-input__container:not(.is-empty) .material-input__label,\n                .material-input__container.label-always-floats .material-input__label{\n                    top: .6em;\n                    font-size: .75em;\n                }\n                .material-input__input:focus ~ .material-input__label,\n                .material-input__container.is-empty .material-input__input[placeholder]:focus ~ .material-input__label{\n                    color: var(--material-input-highlight-color, rgb(54,79,199));\n                }\n                /* errror state */\n                .material-input__container.invalid.label-always-floats .material-input__label,\n                .material-input__container.invalid .material-input__input:focus ~ .material-input__label,\n                .material-input__container.is-empty.invalid .material-input__input[placeholder]:focus ~ .material-input__label,\n                .material-input__container.is-empty.invalid .material-input__input[placeholder] ~ .material-input__label{\n                    color: var(--material-input-invalid-color, rgb(224,49,49));\n                }\n                /* valid state */\n                .material-input__container.valid.label-always-floats .material-input__label,\n                .material-input__container.valid .material-input__input:focus ~ .material-input__label,\n                .material-input__container.is-empty.valid .material-input__input[placeholder]:focus ~ .material-input__label,\n                .material-input__container.is-empty.valid .material-input__input[placeholder] ~ .material-input__label{\n                    color: var(--material-input-valid-color, rgb(47,158,68));\n                }\n                /* bar */\n                .material-input__bar{\n                    position:relative;\n                    display:block;\n                    width:100%;\n                }\n                .material-input__bar::before, .material-input__bar::after {\n                    content:'';\n                    height: var(--material-input-highlight-line-height, 2px);\n                    width:0;\n                    bottom:0;\n                    position:absolute;\n                    background: var(--material-input-highlight-color, rgb(54,79,199));\n                    transition:0.2s ease all;\n                }\n                .material-input__container.invalid .material-input__bar::before,\n                .material-input__container.invalid .material-input__bar::after{\n                    background: var(--material-input-invalid-color, rgb(224,49,49));\n                }\n                .material-input__container.valid .material-input__bar::before,\n                .material-input__container.valid .material-input__bar::after{\n                    background: var(--material-input-valid-color, rgb(47,158,68));\n                }\n                .material-input__bar::before {\n                    left:50%;\n                }\n                .material-input__bar::after {\n                    right:50%;\n                }\n                .material-input__input:focus ~ .material-input__bar:before, .material-input__input:focus ~ .material-input__bar:after{\n                    width:50%;\n                }\n                .material-input__message{\n                    font-size: 70%;\n                    color: var(--material-input-invalid-color, rgb(224,49,49));\n                    padding: .3rem 0 .5rem 10px;\n                }\n                .material-input__message:empty{\n                    display: none;\n                }\n            </style>\n            <div class=\"material-input__container no-animation${this.value === '' ? ' is-empty' : ''}\">\n                <content></content>\n                <input class=\"material-input__input\" tabindex=\"-1\" />\n                <label class=\"material-input__label\"></label>\n                <div class=\"material-input__bar\"></div>\n                <div class=\"material-input__message\"></div>\n            </div>\n        `\n    this.attributesExceptions = [\n      'name',\n      'id',\n      'style',\n      'label',\n      'tabindex',\n      'placeholder',\n      'autofocus',\n      'autocomplete',\n      'autovalidate'\n    ]\n        // set tab index to make element focussable\n    this.setAttribute('tabindex', 0)\n        // shim shadowDOM styling\n    if (WebComponents !== undefined && WebComponents.flags.shadow === true) { // eslint-disable-line no-undef\n      WebComponents.ShadowCSS.shimStyling(this.shadowRoot, 'material-input') // eslint-disable-line no-undef\n    }\n        // add hidden input\n    this.insertAdjacentHTML('afterend', '<input tabindex=\"-1\" class=\"material-input__hidden-input\" style=\"pointer-events: none; margin:0; border: 0; height: 0; opacity: 0; position: absolute; top: ' + (this.offsetTop + this.offsetHeight) + 'px; left: ' + this.offsetLeft + 'px;\" name=\"' + this.getAttribute('name') + '\"/>')\n    this.$hiddenInput = document.querySelector('.material-input__hidden-input[name=' + this.getAttribute('name') + ']')\n        // elements\n    this.$container = this.shadowRoot.querySelector('.material-input__container')\n    this.$input = this.$container.querySelector('.material-input__input')\n    this.$label = this.$container.querySelector('.material-input__label')\n    this.$message = this.$container.querySelector('.material-input__message')\n    this.$form = this._getParentForm(this)\n        //\n    this.validity = this.hasAttribute('valid') ? true : this.hasAttribute('invalid') ? false : undefined\n        // add events\n    this._addEvents()\n        // transfer attribtues to input & hiddenInput\n    this._transferAttributes()\n        // set value, label, etc.\n    this._setValue(this.getAttribute('value'))\n    this.$input.value = this.value\n    this._setLabel(this.getAttribute('label'))\n    this._setPlaceholder(this.getAttribute('placeholder'))\n    this._setValid(this.validity)\n    this._setMessage(this.getAttribute('message'))\n        // remove no-animation loading class\n    setTimeout(function () {\n      this.$container.classList.remove('no-animation')\n    }.bind(this), 100)\n  }\n    /**\n     * when an attribute is changed\n     */\n  attributeChangedCallback (attrName, oldVal, newVal) {\n        // define callbacks\n    var callbacks = {\n      'value': this._setValue,\n      'label': this._setLabel,\n      'placeholder': this._setPlaceholder,\n      'name': this._setName,\n      'message': this._setMessage\n    }\n        // call callback if it exists\n    if (callbacks.hasOwnProperty(attrName)) {\n      callbacks[attrName].call(this, newVal, oldVal)\n    } else {\n            // if other attributes are updated, transfer updates to hidden input field\n      this._transferAttribute(attrName, newVal, this.attributesExceptions)\n    }\n  }\n    /**\n     * set the custom validity of the input\n     */\n  setCustomValidity (msg) {\n    this.$input.setCustomValidity(msg)\n    this.$hiddenInput.setCustomValidity(msg)\n  }\n    /**\n     * add events for all items\n     */\n  _addEvents () {\n        // on focuse pass to input\n    this.addEventListener('focus', function () {\n      this.$input.focus()\n    })\n        // set validation status when hiddenInput is invalid\n    this.$hiddenInput.addEventListener('invalid', function () {\n      this._setValid(false)\n    }.bind(this))\n        // submit on enters\n    this.$input.addEventListener('keydown', function (e) {\n      if (e.keyCode === 13) {\n        if (this.$form.checkValidity()) {\n          this.$form.submit()\n        } else if (this.$form.querySelector('[type=\"submit\"]') !== null) {\n                    // needed to trigger validation\n          this.$form.querySelector('[type=\"submit\"]').click()\n        }\n        return\n      }\n    }.bind(this))\n        // pass on value when user enters content\n    this.$input.addEventListener('input', function (e) {\n      this._setValue(this.$input.value)\n    }.bind(this))\n        // pass in value and validate when user exits input field\n    this.$input.addEventListener('blur', function () {\n      this._setValue(this.$input.value)\n      if (this.hasAttribute('autovalidate') && String(this.getAttribute('autovalidate')) !== 'false') {\n                // check if is valid\n        this._checkValidity()\n      }\n    }.bind(this))\n        // if autovalidate is set to true, validate on key event\n    if (this.hasAttribute('autovalidate') && String(this.getAttribute('autovalidate')) !== 'false') {\n      this.$input.addEventListener('input', function () {\n                // check if is valid\n        this._checkValidity()\n      }.bind(this))\n    } else {\n      this.$input.addEventListener('input', function () {\n                // check if is valid\n        if (this.$container.classList.contains('invalid') && this.$input.value !== '' && this.$input.validity.valid === true) {\n          this._setValid(true)\n        }\n      }.bind(this))\n    }\n  }\n    /**\n     * get parent form\n     */\n  _getParentForm (current) {\n    current = current.parentElement\n        // return form\n    if (current.constructor === HTMLFormElement) return current\n        // return false on body\n    if (current.constructor === HTMLBodyElement) return false\n        // dig one level deeper\n    return this._getParentForm(current)\n  }\n    /**\n     * check validity\n     */\n  _checkValidity () {\n    if (this.$input.value !== '' && (this.$input.validity.valid === true || this.$input.validity.valid === false)) {\n      this._setValid(this.$input.validity.valid)\n    } else {\n      this._setValid(undefined)\n    }\n  }\n    /**\n     * set value\n     */\n  _setValue (newValue) {\n    this.value = newValue\n  }\n    /**\n     * set message\n     */\n  _setMessage (msg) {\n    this.$message.innerHTML = msg\n  }\n    /**\n     * set name\n     */\n  _setName (newName) {\n    this.$hiddenInput.setAttribute('name', newName)\n  }\n    /**\n     * set field to valid or invalid\n     */\n  _setValid (validity = undefined) {\n        // valid is not set\n    if (validity === undefined) {\n      this.valid = undefined\n      this.$container.classList.remove('valid')\n      this.$container.classList.remove('invalid')\n    }\n        // valid is true\n    if (validity === true) {\n      this.valid = true\n      this.$container.classList.add('valid')\n      this.$container.classList.remove('invalid')\n    }\n        // valid is false\n    if (validity === false) {\n      this.valid = false\n      this.$container.classList.add('invalid')\n      this.$container.classList.remove('valid')\n    }\n  }\n    /**\n     * transfer attributes to input\n     */\n  _transferAttributes () {\n    for (var key of Object.keys(this.attributes)) {\n      if (this.attributes.hasOwnProperty(key)) {\n        this._transferAttribute(this.attributes[key].name, this.attributes[key].value, this.attributesExceptions)\n      }\n    }\n  }\n    /**\n     * transfer attribute to input\n     */\n  _transferAttribute (attrName, val, attributesExceptions) {\n    if (attributesExceptions.indexOf(attrName) === -1) {\n      this.$hiddenInput.setAttribute(attrName, val)\n      this.$input.setAttribute(attrName, val)\n    }\n  }\n    /**\n     * update value and toggle is-empty class\n     */\n  _value (val) {\n        // set value of hidden input for form submission\n    this.$hiddenInput.value = val\n    this.setAttribute('value', val)\n        // set state depending on value\n    this._toggle(this.$container, 'is-empty', val === '')\n  }\n    /**\n     * add label to material-input\n     */\n  _setLabel (label) {\n    if (label !== undefined && label !== null) {\n      this.$label.innerHTML = label\n      return label\n    }\n    this.$label.innerHTML = ''\n  }\n    /**\n     * set placeholder and add label-always-floats class\n     */\n  _setPlaceholder (placeholder) {\n    if (placeholder !== null && placeholder !== undefined) {\n      this.$input.setAttribute('placeholder', placeholder)\n      this.$container.classList.add('label-always-floats')\n      return\n    }\n    this.$input.removeAttribute('placeholder')\n    this.$container.classList.remove('label-always-floats')\n  }\n    /**\n     * since classList.toggle with a second param is not supported in IE11 and below\n     */\n  _toggle (el, cls, condition) {\n    if (condition === true) {\n      el.classList.add(cls)\n    } else {\n      el.classList.remove(cls)\n    }\n  }\n}\n\ndocument.registerElement('material-input', MaterialInput)\n"],"file":"material-input.js"}